
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package parser;

import java.lang.*;
import java.util.List;
import java.util.ArrayList;
import java.lang.reflect.*;
import java_cup.runtime.*;
import syntechtics.jxpression.functions.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\036\000\002\011\004\000\002\002\004\000\002\010" +
    "\005\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\006\005\000" +
    "\002\006\003\000\002\007\005\000\002\007\006\000\002" +
    "\004\004\000\002\004\005\000\002\004\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\004\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\002\003\000\002\002" +
    "\003\000\002\002\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\065\000\016\007\004\014\020\024\015\027\005\030" +
    "\007\031\013\001\002\000\016\007\004\014\020\024\015" +
    "\027\005\030\007\031\013\001\002\000\042\004\uffe5\005" +
    "\uffe5\006\uffe5\007\uffe5\011\uffe5\012\uffe5\013\uffe5\015\uffe5" +
    "\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\025" +
    "\uffe5\026\uffe5\001\002\000\042\004\ufffa\005\ufffa\006\ufffa" +
    "\007\ufffa\011\ufffa\012\ufffa\013\ufffa\015\ufffa\016\ufffa\017" +
    "\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\025\ufffa\026\ufffa" +
    "\001\002\000\042\004\uffe4\005\uffe4\006\uffe4\007\uffe4\011" +
    "\uffe4\012\uffe4\013\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4" +
    "\021\uffe4\022\uffe4\023\uffe4\025\uffe4\026\uffe4\001\002\000" +
    "\042\004\ufffe\005\ufffe\006\ufffe\007\ufffe\011\ufffe\012\ufffe" +
    "\013\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\022" +
    "\ufffe\023\ufffe\025\ufffe\026\ufffe\001\002\000\042\004\ufffb" +
    "\005\ufffb\006\ufffb\007\ufffb\011\ufffb\012\ufffb\013\ufffb\015" +
    "\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb" +
    "\025\ufffb\026\ufffb\001\002\000\042\004\ufffd\005\ufffd\006" +
    "\ufffd\007\ufffd\011\ufffd\012\ufffd\013\ufffd\015\ufffd\016\ufffd" +
    "\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\025\ufffd\026" +
    "\ufffd\001\002\000\044\004\uffe6\005\uffe6\006\uffe6\007\uffe6" +
    "\011\uffe6\012\uffe6\013\uffe6\014\060\015\uffe6\016\uffe6\017" +
    "\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\025\uffe6\026\uffe6" +
    "\001\002\000\004\002\057\001\002\000\016\007\004\014" +
    "\020\024\015\027\005\030\007\031\013\001\002\000\036" +
    "\005\055\006\031\007\022\011\034\012\025\013\027\016" +
    "\024\017\026\020\035\021\032\022\036\023\030\025\023" +
    "\026\037\001\002\000\042\004\ufffc\005\ufffc\006\ufffc\007" +
    "\ufffc\011\ufffc\012\ufffc\013\ufffc\015\ufffc\016\ufffc\017\ufffc" +
    "\020\ufffc\021\ufffc\022\ufffc\023\ufffc\025\ufffc\026\ufffc\001" +
    "\002\000\016\007\004\014\020\024\015\027\005\030\007" +
    "\031\013\001\002\000\036\006\031\007\022\011\034\012" +
    "\025\013\027\015\033\016\024\017\026\020\035\021\032" +
    "\022\036\023\030\025\023\026\037\001\002\000\016\007" +
    "\004\014\020\024\015\027\005\030\007\031\013\001\002" +
    "\000\016\007\004\014\020\024\015\027\005\030\007\031" +
    "\013\001\002\000\016\007\004\014\020\024\015\027\005" +
    "\030\007\031\013\001\002\000\016\007\004\014\020\024" +
    "\015\027\005\030\007\031\013\001\002\000\016\007\004" +
    "\014\020\024\015\027\005\030\007\031\013\001\002\000" +
    "\016\007\004\014\020\024\015\027\005\030\007\031\013" +
    "\001\002\000\016\007\004\014\020\024\015\027\005\030" +
    "\007\031\013\001\002\000\016\007\004\014\020\024\015" +
    "\027\005\030\007\031\013\001\002\000\016\007\004\014" +
    "\020\024\015\027\005\030\007\031\013\001\002\000\042" +
    "\004\uffff\005\uffff\006\uffff\007\uffff\011\uffff\012\uffff\013" +
    "\uffff\015\uffff\016\uffff\017\uffff\020\uffff\021\uffff\022\uffff" +
    "\023\uffff\025\uffff\026\uffff\001\002\000\016\007\004\014" +
    "\020\024\015\027\005\030\007\031\013\001\002\000\016" +
    "\007\004\014\020\024\015\027\005\030\007\031\013\001" +
    "\002\000\016\007\004\014\020\024\015\027\005\030\007" +
    "\031\013\001\002\000\016\007\004\014\020\024\015\027" +
    "\005\030\007\031\013\001\002\000\042\004\ufff3\005\ufff3" +
    "\006\031\007\022\011\034\012\025\013\027\015\ufff3\016" +
    "\024\017\026\020\035\021\032\022\036\023\030\025\023" +
    "\026\ufff3\001\002\000\042\004\uffe8\005\uffe8\006\031\007" +
    "\022\011\034\012\025\013\027\015\uffe8\016\uffe8\017\uffe8" +
    "\020\uffe8\021\uffe8\022\uffe8\023\uffe8\025\uffe8\026\uffe8\001" +
    "\002\000\042\004\uffea\005\uffea\006\031\007\022\011\034" +
    "\012\025\013\027\015\uffea\016\uffea\017\uffea\020\uffea\021" +
    "\uffea\022\uffea\023\uffea\025\uffea\026\uffea\001\002\000\042" +
    "\004\uffef\005\uffef\006\uffef\007\uffef\011\uffef\012\uffef\013" +
    "\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef" +
    "\023\uffef\025\uffef\026\uffef\001\002\000\042\004\uffe9\005" +
    "\uffe9\006\031\007\022\011\034\012\025\013\027\015\uffe9" +
    "\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\025" +
    "\uffe9\026\uffe9\001\002\000\042\004\ufff2\005\ufff2\006\ufff2" +
    "\007\ufff2\011\034\012\025\013\027\015\ufff2\016\ufff2\017" +
    "\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\025\ufff2\026\ufff2" +
    "\001\002\000\042\004\uffe7\005\uffe7\006\031\007\022\011" +
    "\034\012\025\013\027\015\uffe7\016\uffe7\017\uffe7\020\uffe7" +
    "\021\uffe7\022\uffe7\023\uffe7\025\uffe7\026\uffe7\001\002\000" +
    "\042\004\uffed\005\uffed\006\uffed\007\uffed\011\uffed\012\uffed" +
    "\013\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022" +
    "\uffed\023\uffed\025\uffed\026\uffed\001\002\000\042\004\uffec" +
    "\005\uffec\006\031\007\022\011\034\012\025\013\027\015" +
    "\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec" +
    "\025\uffec\026\uffec\001\002\000\042\004\uffee\005\uffee\006" +
    "\uffee\007\uffee\011\uffee\012\uffee\013\uffee\015\uffee\016\uffee" +
    "\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee\025\uffee\026" +
    "\uffee\001\002\000\042\004\uffeb\005\uffeb\006\031\007\022" +
    "\011\034\012\025\013\027\015\uffeb\016\uffeb\017\uffeb\020" +
    "\uffeb\021\uffeb\022\uffeb\023\uffeb\025\uffeb\026\uffeb\001\002" +
    "\000\042\004\ufff4\005\ufff4\006\031\007\022\011\034\012" +
    "\025\013\027\015\ufff4\016\024\017\026\020\035\021\032" +
    "\022\036\023\030\025\ufff4\026\ufff4\001\002\000\042\004" +
    "\ufff1\005\ufff1\006\ufff1\007\ufff1\011\034\012\025\013\027" +
    "\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023" +
    "\ufff1\025\ufff1\026\ufff1\001\002\000\004\002\001\001\002" +
    "\000\042\004\ufff5\005\ufff5\006\031\007\022\011\034\012" +
    "\025\013\027\015\ufff5\016\024\017\026\020\035\021\032" +
    "\022\036\023\030\025\ufff5\026\ufff5\001\002\000\004\002" +
    "\000\001\002\000\020\007\004\014\020\015\062\024\015" +
    "\027\005\030\007\031\013\001\002\000\006\004\064\015" +
    "\065\001\002\000\042\004\ufff7\005\ufff7\006\ufff7\007\ufff7" +
    "\011\ufff7\012\ufff7\013\ufff7\015\ufff7\016\ufff7\017\ufff7\020" +
    "\ufff7\021\ufff7\022\ufff7\023\ufff7\025\ufff7\026\ufff7\001\002" +
    "\000\040\004\ufff8\006\031\007\022\011\034\012\025\013" +
    "\027\015\ufff8\016\024\017\026\020\035\021\032\022\036" +
    "\023\030\025\023\026\037\001\002\000\016\007\004\014" +
    "\020\024\015\027\005\030\007\031\013\001\002\000\042" +
    "\004\ufff6\005\ufff6\006\ufff6\007\ufff6\011\ufff6\012\ufff6\013" +
    "\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6" +
    "\023\ufff6\025\ufff6\026\ufff6\001\002\000\040\004\ufff9\006" +
    "\031\007\022\011\034\012\025\013\027\015\ufff9\016\024" +
    "\017\026\020\035\021\032\022\036\023\030\025\023\026" +
    "\037\001\002\000\042\004\ufff0\005\ufff0\006\ufff0\007\ufff0" +
    "\011\ufff0\012\ufff0\013\ufff0\015\ufff0\016\ufff0\017\ufff0\020" +
    "\ufff0\021\ufff0\022\ufff0\023\ufff0\025\ufff0\026\ufff0\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\065\000\020\002\007\003\011\004\016\005\010\007" +
    "\005\010\015\011\013\001\001\000\016\002\007\003\011" +
    "\004\016\005\010\007\005\010\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\002\007\003\011\004\016\005\010" +
    "\007\005\010\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\002\007\003\011\004\016\005\010\007\005" +
    "\010\020\001\001\000\002\001\001\000\016\002\007\003" +
    "\011\004\016\005\010\007\005\010\053\001\001\000\016" +
    "\002\007\003\011\004\016\005\010\007\005\010\052\001" +
    "\001\000\016\002\007\003\011\004\016\005\010\007\005" +
    "\010\051\001\001\000\016\002\007\003\011\004\016\005" +
    "\010\007\005\010\050\001\001\000\016\002\007\003\011" +
    "\004\016\005\010\007\005\010\047\001\001\000\016\002" +
    "\007\003\011\004\016\005\010\007\005\010\046\001\001" +
    "\000\016\002\007\003\011\004\016\005\010\007\005\010" +
    "\045\001\001\000\016\002\007\003\011\004\016\005\010" +
    "\007\005\010\044\001\001\000\016\002\007\003\011\004" +
    "\016\005\010\007\005\010\043\001\001\000\002\001\001" +
    "\000\016\002\007\003\011\004\016\005\010\007\005\010" +
    "\042\001\001\000\016\002\007\003\011\004\016\005\010" +
    "\007\005\010\041\001\001\000\016\002\007\003\011\004" +
    "\016\005\010\007\005\010\040\001\001\000\016\002\007" +
    "\003\011\004\016\005\010\007\005\010\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\002\007\003\011\004\016\005\010\006\060\007\005\010" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\002\007\003\011\004\016\005\010\007" +
    "\005\010\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 

	/** this object is the input user object **/	
	Object object = null;
	public void setObject(Object object) {
		this.object = object;
	}

	Function result = null;

	private static Class<?> loadFunction(String functionName) {
		try {
			return Class.forName("syntechtics.jxpression.functions." + functionName);
		} catch (ClassNotFoundException e) {
			throw new RuntimeException(e);
		}
	}
	
	private static Function<?> newInstance(String functionName) {
		try {
			return ((Function)loadFunction(functionName).newInstance());
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}
	
	private static Constant loadConstant(Object object) {
		Class<?> clazz = loadFunction("Constant");
		Constructor<Constant> function = (Constructor<Constant>) clazz.getConstructors()[0];
		Constant constant;
		try {
			constant = function.newInstance(object);
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
		return constant;
	} 


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // input ::= expr SEMI 
            {
              Function RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Function e = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("input",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= input EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Function start_val = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr ::= LPAREN expr RPAREN 
            {
              Function RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Function e = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
	        RESULT = e; 
	        result = RESULT;
	      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= constant 
            {
              Function RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Function c = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		  	RESULT = c;
		  	result = RESULT; 
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= arithmatic_expr 
            {
              Function RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Function c = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		  	RESULT = c;
		  	result = RESULT; 
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= boolean_expr 
            {
              Function RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Function c = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		  	RESULT = c;
		  	result = RESULT; 
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= relational_expr 
            {
              Function RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Function c = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		  	RESULT = c;
		  	result = RESULT; 
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= function 
            {
              Function RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Function c = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		  	RESULT = c;
		  	result = RESULT; 
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // arguments ::= arguments COMMA expr 
            {
              Function RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Function args = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Function e = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          	((Arguments)args).addArgument(e);
          	RESULT=args;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // arguments ::= expr 
            {
              Function RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Function e = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
          	Arguments arguments = (Arguments)newInstance("Arguments");
          	arguments.addArgument(e);
          	RESULT = arguments;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // function ::= IDENTIFIER LPAREN RPAREN 
            {
              Function RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
			  Class<?> clazz = loadFunction(i);
			  Function<Double> function = (Function<Double>)clazz.newInstance();
			  RESULT = function;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // function ::= IDENTIFIER LPAREN arguments RPAREN 
            {
              Function RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Function args = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		  	  Class<?> clazz = loadFunction(i);
			  Function function = (Function)clazz.newInstance();
			  Arguments arguments = (Arguments)args;
			  Function[] functions = arguments.evaluate();
			  function.setArgs(functions);
			  RESULT = function;
		  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // boolean_expr ::= NOT expr 
            {
              Function RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Function e = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	      	Function function = (Function)newInstance("Not");
	      	function.setArgs(e);
	        RESULT = function;
	      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // boolean_expr ::= expr AND expr 
            {
              Function RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Function e1 = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Function e2 = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	      	Function function = (Function)newInstance("And");
	      	function.setArgs(e1, e2);
	        RESULT = function;
	      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // boolean_expr ::= expr OR expr 
            {
              Function RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Function e1 = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Function e2 = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	      	Function function = (Function)newInstance("Or");
	      	function.setArgs(e1, e2);
	        RESULT = function;
	      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // arithmatic_expr ::= expr PLUS expr 
            {
              Function RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Function e1 = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Function e2 = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	      	Function function = (Function)newInstance("Add");
	      	function.setArgs(e1, e2);
	        RESULT = function; 
	      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // arithmatic_expr ::= expr MINUS expr 
            {
              Function RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Function e1 = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Function e2 = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	      	Function function = (Function)newInstance("Subtract");
	      	function.setArgs(e1, e2);
	        RESULT = function;
	      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // arithmatic_expr ::= MINUS expr 
            {
              Function RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Function e = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	        Function function = (Function)newInstance("Subtract");
	      	function.setArgs(loadConstant(0.0), e);
	        RESULT = function;
	      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // arithmatic_expr ::= expr TIMES expr 
            {
              Function RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Function e1 = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Function e2 = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	      	Function function = (Function)newInstance("Multiply");
	      	function.setArgs(e1, e2);
	        RESULT = function; 
	      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // arithmatic_expr ::= expr DIVIDE expr 
            {
              Function RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Function e1 = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Function e2 = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	      	Function function = (Function)newInstance("Divide");
	      	function.setArgs(e1, e2);
	        RESULT = function;
	      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // arithmatic_expr ::= expr MOD expr 
            {
              Function RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Function e1 = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Function e2 = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	      	Function function = (Function)newInstance("Mod");
	      	function.setArgs(e1, e2);
	        RESULT = function; 
	      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmatic_expr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // relational_expr ::= expr GTEQ expr 
            {
              Function RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Function e1 = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Function e2 = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	      	  Class<?> clazz = loadFunction("GTEquals");
			  Function<Double> function = (Function<Double>)clazz.newInstance();
			  function.setArgs(e1, e2);
			  RESULT = function;
	      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // relational_expr ::= expr EQEQ expr 
            {
              Function RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Function e1 = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Function e2 = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	      	  Class<?> clazz = loadFunction("Equals");
			  Function<Double> function = (Function<Double>)clazz.newInstance();
			  function.setArgs(e1, e2);
			  RESULT = function;
	      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // relational_expr ::= expr LTEQ expr 
            {
              Function RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Function e1 = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Function e2 = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	      	  Class<?> clazz = loadFunction("LTEquals");
			  Function<Double> function = (Function<Double>)clazz.newInstance();
			  function.setArgs(e1, e2);
			  RESULT = function;
	      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // relational_expr ::= expr GT expr 
            {
              Function RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Function e1 = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Function e2 = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	      	  Class<?> clazz = loadFunction("GreaterThan");
			  Function<Double> function = (Function<Double>)clazz.newInstance();
			  function.setArgs(e1, e2);
			  RESULT = function;
	      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // relational_expr ::= expr LT expr 
            {
              Function RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Function e1 = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Function e2 = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	      	  Class<?> clazz = loadFunction("LessThan");
			  Function<Double> function = (Function<Double>)clazz.newInstance();
			  function.setArgs(e1, e2);
			  RESULT = function;
	      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // relational_expr ::= expr NOTEQ expr 
            {
              Function RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Function e1 = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Function e2 = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	      	  Class<?> clazz = loadFunction("NotEquals");
			  Function<Double> function = (Function<Double>)clazz.newInstance();
			  function.setArgs(e1, e2);
			  RESULT = function;
	      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // constant ::= IDENTIFIER 
            {
              Function RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	      	Field field = object.getClass().getDeclaredField(n);
		    boolean accessible = field.isAccessible();
		    field.setAccessible(true);
			Object o = field.get(object);
			if(o instanceof Number) {
				o = ((Number)o).doubleValue();
			}
	      	RESULT = loadConstant(o);
		    field.setAccessible(accessible);
	      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // constant ::= NUMBER 
            {
              Function RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	      	Double d = Double.valueOf(n);
	      	RESULT = loadConstant(d);
	      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // constant ::= STRING 
            {
              Function RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
	        RESULT=loadConstant(s); 
	      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
